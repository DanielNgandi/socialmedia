// server/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  name      String?
  bio       String?
  isOnline  Boolean  @default(false)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
  likes     Like[]
  comments  Comment[]
  following Follow[]  @relation("following")
  followers Follow[]  @relation("followers")
  notifications Notification[]
  messagesSent Message[]  @relation("sender")
  conversations Conversation[] @relation("ConversationUsers") // âœ… Opposite side of relation

}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  likes     Like[]
  comments  Comment[]
  notifications Notification[]

}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  postId   Int
  authorId Int
  post   Post @relation(fields: [postId], references: [id])
  author User @relation(fields: [authorId], references: [id])

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}
model Notification {
  id        Int      @id @default(autoincrement())
  type      String   // e.g., "new_post", "comment", etc.
  userId    Int
  postId    Int?
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  post   Post? @relation(fields: [postId], references: [id])
}
model Conversation {
  id          Int        @id @default(autoincrement())
  users     User[]   @relation("ConversationUsers")      // Array of two user IDs
  messages    Message[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int
  senderId       Int
  text           String
  createdAt      DateTime     @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("sender", fields: [senderId], references: [id])
}
